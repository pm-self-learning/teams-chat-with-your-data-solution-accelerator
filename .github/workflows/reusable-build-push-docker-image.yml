name: Reusable Docker build and push workflow

on:
  workflow_call:
   inputs:
      dockerfile:
        required: true
        type: string

      image_name:
          required: true
          type: string

      tag_name:
          required: true
          type: string

jobs:

  docker-build-push:
    runs-on: ubuntu-latest
    steps:
      # REFERENCE EXAMPLE - Azure Login and Get ACR credentials from Azure Key Vault steps are here as a reference to get ACR credentials from Key Vault.
      # To use Azure Key Vault, additional setup is required, like giving the identity appropriate access to Azure KV to fetch secrets.
      # - name: Azure Login
      #   uses: azure/login@v1
      #   with:
      #     client-id: ${{ secrets.AZURE_CLIENT_ID }}
      #     tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      #     subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # - name: Get ACR credentials from Key Vault
      #   id: get-acr-credentials
      #   uses: azure/cli@v2
      #   with:
      #     azcliversion: latest
      #     inlineScript: |

      #       az_container_reg=$(az keyvault secret show --name AZURE-CONTAINER-REGISTRY --vault-name ${{ secrets.AZURE_KEYVAULT_NAME }} --query value -o tsv)
      #       echo "::add-mask::$az_container_reg"
      #       echo "AZURE-CONTAINER-REGISTRY=$az_container_reg" >> $GITHUB_ENV

      #       az_container_reg_un=$(az keyvault secret show --name AZURE-CONTAINER-REGISTRY-USER-NAME --vault-name ${{ secrets.AZURE_KEYVAULT_NAME }} --query value -o tsv)
      #       echo "::add-mask::$az_container_reg_un"
      #       echo "AZURE-CONTAINER-REGISTRY-USER-NAME=$az_container_reg_un" >> $GITHUB_ENV

      #       az_container_reg_pwd=$(az keyvault secret show --name AZURE-CONTAINER-REGISTRY-PASSWORD --vault-name ${{ secrets.AZURE_KEYVAULT_NAME }} --query value -o tsv)
      #       echo "::add-mask::$az_container_reg_pwd"
      #       echo "AZURE-CONTAINER-REGISTRY-PASSWORD=$az_container_reg_pwd" >> $GITHUB_ENV

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Evaluate environment value
        id: set-env
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "SOURCE_ENV=PROD" >> $GITHUB_ENV
          else
            echo "SOURCE_ENV=DEV" >> $GITHUB_ENV
          fi

      - name: Get ACR details
        run: |
          echo "AZURE_CONTAINER_REGISTRY=${{ env.SOURCE_ENV }}_AZURE_CONTAINER_REGISTRY"  >> $GITHUB_ENV
          echo "AZURE_CONTAINER_REGISTRY_USER_NAME=${{ env.SOURCE_ENV }}_AZURE_CONTAINER_REGISTRY_USER_NAME" >> $GITHUB_ENV
          echo "AZURE_CONTAINER_REGISTRY_PASSWORD=${{ env.SOURCE_ENV }}_AZURE_CONTAINER_REGISTRY_PASSWORD"  >> $GITHUB_ENV

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets[env.AZURE_CONTAINER_REGISTRY] }}
          username: ${{ secrets[env.AZURE_CONTAINER_REGISTRY_USER_NAME] }}
          password: ${{ secrets[env.AZURE_CONTAINER_REGISTRY_PASSWORD]  }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set Docker tags
        id: docker-tags
        run: |
          echo "LATEST_TAG=${{ secrets[env.AZURE_CONTAINER_REGISTRY] }}/${{ inputs.image_name }}:latest" >> $GITHUB_ENV
          echo "VERSION_TAG=${{ secrets[env.AZURE_CONTAINER_REGISTRY] }}/${{ inputs.image_name }}:${{ inputs.tag_name }}" >> $GITHUB_ENV


      - name: Build Docker Image and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          push: true
          tags: |
            ${{ env.LATEST_TAG }}
            ${{ env.VERSION_TAG }}
